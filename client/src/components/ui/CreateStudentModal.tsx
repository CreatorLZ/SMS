import { useState, useEffect } from "react";
import { useCreateStudentMutation } from "@/hooks/useCreateStudentMutation";
import { useUsersQuery } from "@/hooks/useUsersQuery";
import { useStudentManagementStore } from "@/store/studentManagementStore";
import { useAddStudentsMutation } from "@/hooks/useAddStudentsMutation";
import { Student } from "@/hooks/useStudentsQuery";
import { Toast } from "./Toast";
import {
  STUDENT_CLASSES,
  STUDENT_CLASS_VALUES,
  isValidStudentClass,
} from "@/constants/classes";

interface CreateStudentModalProps {
  classroomId?: string;
  classroomName?: string;
  onStudentCreated?: () => void;
}

export default function CreateStudentModal({
  classroomId,
  classroomName,
  onStudentCreated,
}: CreateStudentModalProps = {}) {
  const {
    isCreateModalOpen,
    setCreateModalOpen,
    classroomId: storeClassroomId,
    classroomName: storeClassroomName,
    onStudentCreated: storeOnStudentCreated,
  } = useStudentManagementStore();
  const createStudentMutation = useCreateStudentMutation();
  const addStudentsMutation = useAddStudentsMutation();
  const { data: users } = useUsersQuery();

  // Use props if provided, otherwise use store values
  const currentClassroomId = classroomId || storeClassroomId;
  const currentClassroomName = classroomName || storeClassroomName;
  const currentOnStudentCreated = onStudentCreated || storeOnStudentCreated;

  const [formData, setFormData] = useState({
    fullName: "",
    studentId: "",
    currentClass: currentClassroomName || "",
    parentId: "",
    gender: "",
    dateOfBirth: "",
    address: "",
    location: "",
    parentName: "",
    parentPhone: "",
    relationshipToStudent: "",
    admissionDate: "",
  });

  const [isAutoGenerated, setIsAutoGenerated] = useState(false);
  const [previewId, setPreviewId] = useState("");

  const [toastProps, setToastProps] = useState<{
    message: string;
    type: "success" | "error";
  } | null>(null);
  const [showToast, setShowToast] = useState(false);

  const showToastMessage = (message: string, type: "success" | "error") => {
    setToastProps({ message, type });
    setShowToast(true);
  };

  // Generate preview ID when class changes
  useEffect(() => {
    if (formData.currentClass && !formData.studentId) {
      const classPrefix = formData.currentClass
        .replace(/[\d\s]/g, "")
        .toUpperCase();
      const currentYear = new Date().getFullYear().toString().slice(-2);
      setPreviewId(`${classPrefix}${currentYear}XXXX`);
    } else {
      setPreviewId("");
    }
  }, [formData.currentClass, formData.studentId]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      // Create the student
      const createdStudent = (await createStudentMutation.mutateAsync(
        formData
      )) as Student;

      // If classroomId is provided, automatically assign the student to the classroom
      if (currentClassroomId && createdStudent) {
        try {
          await addStudentsMutation.mutateAsync({
            classroomId: currentClassroomId,
            data: { studentIds: [createdStudent._id] },
          });
          showToastMessage(
            "Student created and added to class successfully!",
            "success"
          );
        } catch (assignmentError: any) {
          console.error(
            "Error assigning student to classroom:",
            assignmentError
          );
          showToastMessage(
            "Student created but failed to assign to class. Please assign manually.",
            "error"
          );
        }
      } else {
        showToastMessage("Student created successfully!", "success");
      }

      // Call the callback to refresh classroom data
      if (currentOnStudentCreated) {
        currentOnStudentCreated();
      }

      setCreateModalOpen(false);
      setFormData({
        fullName: "",
        studentId: "",
        currentClass: currentClassroomName || "",
        parentId: "",
        gender: "",
        dateOfBirth: "",
        address: "",
        location: "",
        parentName: "",
        parentPhone: "",
        relationshipToStudent: "",
        admissionDate: "",
      });
      setIsAutoGenerated(false);
      setPreviewId("");
    } catch (error: any) {
      console.error("Error creating student:", error);
      // Only show toast for actual business errors, not server errors
      if (error?.response?.status === 400) {
        showToastMessage(
          error?.response?.data?.message || "Invalid data provided",
          "error"
        );
      } else if (error?.response?.status >= 500) {
        showToastMessage("Server error occurred. Please try again.", "error");
      } else {
        showToastMessage("An unexpected error occurred", "error");
      }
    }
  };

  // Filter only parent users
  const parentUsers =
    users?.data?.filter((user) => user.role === "parent") || [];

  if (!isCreateModalOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center">
      <div className="bg-white p-6 rounded-lg w-96">
        <h2 className="text-xl font-bold mb-4">Create New Student</h2>
        <form onSubmit={handleSubmit}>
          <div className="mb-4">
            <label className="block text-sm font-medium mb-1">Full Name</label>
            <input
              type="text"
              value={formData.fullName}
              onChange={(e) =>
                setFormData({ ...formData, fullName: e.target.value })
              }
              className="w-full p-2 border rounded"
              required
            />
          </div>
          <div className="mb-4">
            <label className="block text-sm font-medium mb-1">
              Student ID{" "}
              <span className="text-xs text-gray-500">
                (Leave empty for auto-generation)
              </span>
            </label>
            <div className="space-y-2">
              <input
                type="text"
                value={formData.studentId}
                onChange={(e) => {
                  setFormData({ ...formData, studentId: e.target.value });
                  setIsAutoGenerated(false);
                }}
                placeholder={
                  previewId ||
                  "Enter student ID or leave empty for auto-generation"
                }
                className="w-full p-2 border rounded"
              />
              {previewId && !formData.studentId && (
                <div className="flex items-center justify-between bg-blue-50 p-2 rounded border">
                  <div className="flex items-center space-x-2">
                    <span className="text-sm text-blue-700">
                      Suggested: <strong>{previewId}</strong>
                    </span>
                    <span className="text-xs text-blue-600">
                      (Will be auto-generated)
                    </span>
                  </div>
                  <button
                    type="button"
                    onClick={() => {
                      setFormData({ ...formData, studentId: "" });
                      setIsAutoGenerated(true);
                    }}
                    className="text-xs bg-blue-500 text-white px-2 py-1 rounded hover:bg-blue-600"
                  >
                    Use Auto ID
                  </button>
                </div>
              )}
              {formData.studentId && (
                <div className="text-xs text-green-600">
                  âœ“ Manual ID: {formData.studentId}
                </div>
              )}
            </div>
          </div>
          <div className="mb-4">
            <label className="block text-sm font-medium mb-1">Class</label>
            <select
              value={formData.currentClass}
              onChange={(e) =>
                setFormData({ ...formData, currentClass: e.target.value })
              }
              className="w-full p-2 border rounded"
              required
            >
              <option value="">Select a class</option>
              {STUDENT_CLASSES.map((classOption) => (
                <option key={classOption.value} value={classOption.value}>
                  {classOption.label}
                </option>
              ))}
            </select>
          </div>
          <div className="mb-4">
            <label className="block text-sm font-medium mb-1">Gender</label>
            <select
              value={formData.gender}
              onChange={(e) =>
                setFormData({ ...formData, gender: e.target.value })
              }
              className="w-full p-2 border rounded"
              required
            >
              <option value="">Select gender</option>
              <option value="Male">Male</option>
              <option value="Female">Female</option>
              <option value="Other">Other</option>
            </select>
          </div>
          <div className="mb-4">
            <label className="block text-sm font-medium mb-1">
              Date of Birth
            </label>
            <input
              type="date"
              value={formData.dateOfBirth}
              onChange={(e) =>
                setFormData({ ...formData, dateOfBirth: e.target.value })
              }
              className="w-full p-2 border rounded"
              required
            />
          </div>
          <div className="mb-4">
            <label className="block text-sm font-medium mb-1">Address</label>
            <input
              type="text"
              value={formData.address}
              onChange={(e) =>
                setFormData({ ...formData, address: e.target.value })
              }
              className="w-full p-2 border rounded"
              required
            />
          </div>
          <div className="mb-4">
            <label className="block text-sm font-medium mb-1">Location</label>
            <input
              type="text"
              value={formData.location}
              onChange={(e) =>
                setFormData({ ...formData, location: e.target.value })
              }
              className="w-full p-2 border rounded"
              required
            />
          </div>
          <div className="mb-4">
            <label className="block text-sm font-medium mb-1">
              Parent Name
            </label>
            <input
              type="text"
              value={formData.parentName}
              onChange={(e) =>
                setFormData({ ...formData, parentName: e.target.value })
              }
              className="w-full p-2 border rounded"
              required
            />
          </div>
          <div className="mb-4">
            <label className="block text-sm font-medium mb-1">
              Parent Phone
            </label>
            <input
              type="tel"
              value={formData.parentPhone}
              onChange={(e) =>
                setFormData({ ...formData, parentPhone: e.target.value })
              }
              className="w-full p-2 border rounded"
              required
              pattern="[0-9]*"
              title="Please enter only digits"
            />
          </div>
          <div className="mb-4">
            <label className="block text-sm font-medium mb-1">
              Relationship to Student
            </label>
            <select
              value={formData.relationshipToStudent}
              onChange={(e) =>
                setFormData({
                  ...formData,
                  relationshipToStudent: e.target.value,
                })
              }
              className="w-full p-2 border rounded"
              required
            >
              <option value="">Select relationship</option>
              <option value="Father">Father</option>
              <option value="Mother">Mother</option>
              <option value="Guardian">Guardian</option>
            </select>
          </div>
          <div className="mb-4">
            <label className="block text-sm font-medium mb-1">
              Admission Date
            </label>
            <input
              type="date"
              value={formData.admissionDate}
              onChange={(e) =>
                setFormData({ ...formData, admissionDate: e.target.value })
              }
              className="w-full p-2 border rounded"
              required
            />
          </div>
          <div className="mb-4">
            <label className="block text-sm font-medium mb-1">
              Parent (Optional)
            </label>
            <select
              value={formData.parentId}
              onChange={(e) =>
                setFormData({ ...formData, parentId: e.target.value })
              }
              className="w-full p-2 border rounded"
            >
              <option value="">Select a parent</option>
              {parentUsers.map((parent) => (
                <option key={parent._id} value={parent._id}>
                  {parent.name} ({parent.email})
                </option>
              ))}
            </select>
          </div>
          <div className="flex justify-end">
            <button
              type="button"
              onClick={() => setCreateModalOpen(false)}
              className="mr-2 px-4 py-2 bg-gray-300 rounded"
            >
              Cancel
            </button>
            <button
              type="submit"
              className="px-4 py-2 bg-blue-500 text-white rounded"
              disabled={createStudentMutation.isPending}
            >
              {createStudentMutation.isPending ? "Creating..." : "Create"}
            </button>
          </div>
        </form>
      </div>

      {showToast && toastProps && (
        <Toast
          message={toastProps.message}
          type={toastProps.type}
          onClose={() => setShowToast(false)}
        />
      )}
    </div>
  );
}
