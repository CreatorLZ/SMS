"use client";
import { useState, useEffect, useMemo } from "react";
import { useCreateStudentMutation } from "@/hooks/useCreateStudentMutation";
import { useUsersQuery } from "@/hooks/useUsersQuery";
import { useStudentManagementStore } from "@/store/studentManagementStore";
import { useAddStudentsMutation } from "@/hooks/useAddStudentsMutation";
import { useStudentIdPreview } from "@/hooks/useStudentIdPreview";
import { PassportPhotoUploader } from "@/components/PassportPhotoUploader";
import { Student } from "@/hooks/useStudentsQuery";
import { toast } from "sonner";
import { Button } from "./button";
import { Input } from "./input";

import { Card, CardContent, CardHeader, CardTitle } from "./card";
import { Badge } from "./badge";
import { Separator } from "./separator";

import {
  STUDENT_CLASSES,
  STUDENT_CLASS_VALUES,
  isValidStudentClass,
} from "@/constants/classes";
import {
  User,
  Calendar,
  MapPin,
  Phone,
  Users,
  GraduationCap,
  Hash,
  X,
  Camera,
  Info,
  Terminal,
  Database,
} from "lucide-react";
import { useAuthStore } from "@/store/authStore";

interface CreateStudentModalProps {
  classroomId?: string;
  classroomName?: string;
  onStudentCreated?: () => void;
}

export default function CreateStudentModal({
  classroomId,
  classroomName,
  onStudentCreated,
}: CreateStudentModalProps = {}) {
  const {
    isCreateModalOpen,
    setCreateModalOpen,
    classroomId: storeClassroomId,
    classroomName: storeClassroomName,
    onStudentCreated: storeOnStudentCreated,
  } = useStudentManagementStore();
  const createStudentMutation = useCreateStudentMutation();
  const addStudentsMutation = useAddStudentsMutation();
  const { data: users } = useUsersQuery();

  // Use props if provided, otherwise use store values
  const currentClassroomId = classroomId || storeClassroomId;
  const currentClassroomName = classroomName || storeClassroomName;
  const currentOnStudentCreated = onStudentCreated || storeOnStudentCreated;

  const [formData, setFormData] = useState({
    firstName: "",
    lastName: "",
    studentId: "",
    currentClass: currentClassroomName || "",
    classroomId: currentClassroomId || "",
    parentId: "",
    gender: "",
    dateOfBirth: "",
    address: "",
    location: "",
    phoneNumber: "",
    email: "",
    parentName: "",
    parentPhone: "",
    parentEmail: "",
    relationshipToStudent: "",
    otherRelationship: "",
    admissionDate: "",
    emergencyContact: {
      name: "",
      relationship: "",
      phoneNumber: "",
    },
    passportPhoto: "",
  });

  const [isAutoGenerated, setIsAutoGenerated] = useState(false);
  const [activeTab, setActiveTab] = useState("STUDENT");
  const [currentTime] = useState(
    new Date().toLocaleTimeString("en-US", { hour12: false })
  );

  // Use the student ID preview hook
  const {
    previewId,
    isLoading: isPreviewLoading,
    error: previewError,
    generatePreview,
    clearPreview,
  } = useStudentIdPreview();

  const { user } = useAuthStore();

  const getSecurityLevel = (role: string) => {
    switch (role) {
      case "superadmin":
        return "LEVEL-10";
      case "admin":
        return "LEVEL-7";
      case "teacher":
        return "LEVEL-5";
      case "parent":
        return "LEVEL-3";
      case "student":
        return "LEVEL-2";
      default:
        return "LEVEL-1";
    }
  };

  const getDisplayRole = (role: string) => {
    return role?.toUpperCase() || "UNKNOWN";
  };

  const showToastMessage = (message: string, type: "success" | "error") => {
    if (type === "success") {
      toast.success(message);
    } else {
      toast.error(message);
    }
  };

  // Generate preview ID when class changes
  useEffect(() => {
    if (formData.currentClass && !formData.studentId) {
      generatePreview(formData.currentClass);
    } else if (!formData.currentClass) {
      clearPreview();
    }
  }, [
    formData.currentClass,
    formData.studentId,
    generatePreview,
    clearPreview,
  ]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      // Validate otherRelationship when Other is selected
      if (
        formData.relationshipToStudent === "Other" &&
        (!formData.otherRelationship ||
          formData.otherRelationship.trim() === "")
      ) {
        toast.error(
          "Please specify the relationship when 'Other' is selected."
        );
        return;
      }

      let submissionData = { ...formData };

      // Use otherRelationship value when Other is selected
      if (submissionData.relationshipToStudent === "Other") {
        submissionData.relationshipToStudent = submissionData.otherRelationship;
      }

      // If creating within a classroom context, ensure classroomId is set properly
      if (currentClassroomId && currentClassroomName) {
        submissionData.classroomId = currentClassroomId;
        submissionData.currentClass = currentClassroomName;
      }

      // Create the student with proper classroom data
      const createdStudent = (await createStudentMutation.mutateAsync(
        submissionData
      )) as Student;

      // If this was created within a classroom context, the student is already assigned
      if (currentClassroomId) {
        toast.success("Student created and added to class successfully!");
      } else {
        toast.success("Student created successfully!");
      }

      // Call the callback to refresh classroom data
      if (currentOnStudentCreated) {
        currentOnStudentCreated();
      }

      setCreateModalOpen(false);
      resetForm();
    } catch (error: any) {
      console.error("Error creating student:", error);

      // Extract the most specific error message possible
      let errorMessage = "An unexpected error occurred";

      // Check for server-provided error message first
      if (error?.response?.data?.message) {
        errorMessage = error.response.data.message;
      }
      // Handle specific HTTP status codes
      else if (error?.response?.status) {
        const status = error.response.status;
        switch (status) {
          case 400:
            errorMessage = "Invalid data provided. Please check your input.";
            break;
          case 401:
            errorMessage = "Authentication required. Please log in again.";
            break;
          case 403:
            errorMessage =
              "Access denied. You don't have permission for this action.";
            break;
          case 404:
            errorMessage = "Resource not found. Please try again.";
            break;
          case 409:
            errorMessage = "A student with this information already exists.";
            break;
          case 422:
            errorMessage = "Validation failed. Please check your input data.";
            break;
          case 429:
            errorMessage =
              "Too many requests. Please wait a moment and try again.";
            break;
          case 500:
            errorMessage = "Server error occurred. Please try again later.";
            break;
          case 502:
          case 503:
          case 504:
            errorMessage =
              "Service temporarily unavailable. Please try again later.";
            break;
          default:
            if (status >= 500) {
              errorMessage = "Server error occurred. Please try again.";
            } else if (status >= 400) {
              errorMessage = "Request failed. Please check your input.";
            }
        }
      }
      // Handle network errors (no response from server)
      else if (error?.request) {
        errorMessage =
          "Network error. Please check your connection and try again.";
      }
      // Handle other types of errors
      else if (error?.message) {
        errorMessage = `Error: ${error.message}`;
      }

      showToastMessage(errorMessage, "error");
    }
  };

  const resetForm = () => {
    setFormData({
      firstName: "",
      lastName: "",
      studentId: "",
      currentClass: currentClassroomName || "",
      classroomId: currentClassroomId || "",
      parentId: "",
      gender: "",
      dateOfBirth: "",
      address: "",
      location: "",
      phoneNumber: "",
      email: "",
      parentName: "",
      parentPhone: "",
      parentEmail: "",
      relationshipToStudent: "",
      otherRelationship: "",
      admissionDate: "",
      emergencyContact: {
        name: "",
        relationship: "",
        phoneNumber: "",
      },
      passportPhoto: "",
    });
    setIsAutoGenerated(false);
    clearPreview();
  };

  // Filter only parent users - memoized to prevent unnecessary re-renders
  const parentUsers = useMemo(
    () => users?.data?.filter((user) => user.role === "parent") || [],
    [users?.data]
  );

  // Auto-fill parent information when parent account is selected
  useEffect(() => {
    if (formData.parentId && parentUsers.length > 0) {
      const selectedParent = parentUsers.find(
        (parent) => parent._id === formData.parentId
      );
      if (selectedParent) {
        setFormData((prev) => ({
          ...prev,
          parentName: selectedParent.name || prev.parentName,
          parentPhone: selectedParent.phone || prev.parentPhone,
          parentEmail: selectedParent.email || prev.parentEmail,
        }));
      }
    }
  }, [formData.parentId, parentUsers]);

  if (!isCreateModalOpen) return null;

  return (
    <div className="fixed inset-0 bg-slate-900/95 backdrop-blur-sm flex items-center justify-center z-50 p-2 md:p-4">
      {/* Retro CRT scanlines effect */}
      <div
        className="absolute inset-0 pointer-events-none opacity-10"
        style={{
          background: `repeating-linear-gradient(
            0deg,
            transparent,
            transparent 2px,
            rgba(75, 85, 99, 0.1) 2px,
            rgba(75, 85, 99, 0.1) 4px
          )`,
        }}
      />

      {/* Main Terminal Container */}
      <div className="w-full max-w-6xl max-h-[95vh] bg-white border-4 border-gray-600 font-mono text-gray-800 shadow-2xl relative overflow-hidden">
        {/* Terminal Header */}
        <div className="border-b-2 border-gray-600 p-2 md:p-4 bg-gray-100/20">
          <div className="flex flex-col md:flex-row md:items-center justify-between gap-2">
            <div className="flex items-center gap-2 md:gap-4">
              <div className="flex items-center gap-2">
                <Terminal className="w-4 h-4 md:w-5 md:h-5 text-gray-600" />
                <span className="text-xs md:text-sm font-bold">
                  MY SCHOOL INTERNATIONAL SCHOOLS
                </span>
              </div>
              <div className="text-xs">STUDENT CREATION SYSTEM v0.0.1</div>
            </div>
            <div className="flex items-center gap-2 md:gap-6 text-xs">
              <span>TIME: {currentTime}</span>
              <span>USER: {getDisplayRole(user?.role || "")}</span>
              <span>SECURITY: {getSecurityLevel(user?.role || "")}</span>
            </div>
          </div>
        </div>

        {/* Sub Header */}
        <div className="border-b border-gray-600 p-2 md:p-3 bg-gray-100/10 text-xs">
          <div className="flex flex-col md:flex-row md:items-center justify-between gap-1">
            <span>[CREATING NEW STUDENT RECORD...]</span>
            <span>CONNECTION: SECURE | MODE: CREATE</span>
          </div>
        </div>

        <div className="flex flex-col h-[calc(95vh-120px)]">
          {/* Tab Navigation */}
          <div className="border-b border-gray-600 p-2 md:p-4 bg-gray-100/10">
            <div className="flex gap-2 text-xs">
              {["STUDENT", "GUARDIAN"].map((tab) => (
                <button
                  key={tab}
                  onClick={() => setActiveTab(tab)}
                  className={`px-3 md:px-4 py-2 border border-gray-600 transition-all duration-200 text-xs md:text-sm ${
                    activeTab === tab
                      ? "bg-gray-600 text-white font-bold"
                      : "bg-gray-50 hover:bg-gray-100/20"
                  }`}
                >
                  {tab === "RESULTS" ? `${tab} VIEW` : `${tab} CREATE`}
                </button>
              ))}
            </div>
          </div>

          {/* Content Area */}
          <div className="flex-1 p-4 md:p-6 overflow-y-auto custom-scrollbar">
            <form onSubmit={handleSubmit} className="space-y-4">
              {activeTab === "STUDENT" && (
                <div>
                  <div className="border-b border-gray-600 mb-4 pb-2">
                    <div className="text-sm font-bold">
                      STUDENT RECORD CREATION
                    </div>
                    <div className="text-xs">ENTER STUDENT DATA BELOW</div>
                  </div>

                  <div className="space-y-1 text-xs font-mono">
                    {/* First Name and Student ID */}
                    <div className="flex flex-col md:flex-row border-b border-gray-600/20 py-2">
                      <div className="w-full md:w-48 font-bold mb-1 md:mb-0">
                        FIRST NAME:
                      </div>
                      <div className="flex-1">
                        <input
                          type="text"
                          value={formData.firstName}
                          onChange={(e) =>
                            setFormData({
                              ...formData,
                              firstName: e.target.value,
                            })
                          }
                          className="w-full bg-transparent border border-gray-600/30 px-2 py-1 text-gray-800 placeholder-gray-600 focus:outline-none focus:border-gray-600"
                          placeholder="Enter first name"
                          required
                        />
                      </div>
                    </div>

                    <div className="flex flex-col md:flex-row border-b border-gray-600/20 py-2">
                      <div className="w-full md:w-48 font-bold mb-1 md:mb-0">
                        SURNAME:
                      </div>
                      <div className="flex-1">
                        <input
                          type="text"
                          value={formData.lastName}
                          onChange={(e) =>
                            setFormData({
                              ...formData,
                              lastName: e.target.value,
                            })
                          }
                          className="w-full bg-transparent border border-gray-600/30 px-2 py-1 text-gray-800 placeholder-gray-600 focus:outline-none focus:border-gray-600"
                          placeholder="Enter surname"
                          required
                        />
                      </div>
                    </div>

                    <div className="flex border-b border-gray-600/20 py-2">
                      <div className="w-48 font-bold">DATE OF BIRTH:</div>
                      <div className="flex-1">
                        <input
                          type="date"
                          value={formData.dateOfBirth}
                          onChange={(e) =>
                            setFormData({
                              ...formData,
                              dateOfBirth: e.target.value,
                            })
                          }
                          className="w-full bg-transparent border border-gray-600/30 px-2 py-1 text-gray-800 placeholder-gray-600 focus:outline-none focus:border-gray-600"
                          required
                        />
                      </div>
                    </div>

                    <div className="flex border-b border-gray-600/20 py-2">
                      <div className="w-48 font-bold">STUDENT ID:</div>
                      <div className="flex-1">
                        <input
                          type="text"
                          value={formData.studentId}
                          onChange={(e) => {
                            setFormData({
                              ...formData,
                              studentId: e.target.value,
                            });
                            setIsAutoGenerated(false);
                          }}
                          className="w-full bg-transparent border border-gray-600/30 px-2 py-1 text-gray-800 placeholder-gray-600 focus:outline-none focus:border-gray-600"
                          placeholder={
                            previewId ||
                            "Enter student ID or leave empty for auto-generation"
                          }
                        />
                        {previewId && !formData.studentId && (
                          <div className="mt-2 flex items-center justify-between bg-blue-50 p-2 rounded border">
                            <div className="flex items-center space-x-2">
                              <Hash className="w-3 h-3 text-blue-600" />
                              <span className="text-xs text-blue-700">
                                Suggested: <strong>{previewId}</strong>
                              </span>
                              <Badge variant="secondary" className="text-xs">
                                Auto-generated
                              </Badge>
                            </div>
                            <Button
                              type="button"
                              size="sm"
                              onClick={() => {
                                if (previewId) {
                                  setFormData({
                                    ...formData,
                                    studentId: previewId,
                                  });
                                  setIsAutoGenerated(true);
                                }
                              }}
                              variant="outline"
                              disabled={!previewId || isPreviewLoading}
                              className="text-xs"
                            >
                              {isPreviewLoading
                                ? "Generating..."
                                : "Use Auto ID"}
                            </Button>
                          </div>
                        )}
                        {formData.studentId && (
                          <div className="mt-2 flex items-center gap-2 text-xs text-green-600">
                            <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                            Manual ID: {formData.studentId}
                          </div>
                        )}
                      </div>
                    </div>

                    <div className="flex border-b border-gray-600/20 py-2">
                      <div className="w-48 font-bold">ADDRESS:</div>
                      <div className="flex-1">
                        <input
                          type="text"
                          value={formData.address}
                          onChange={(e) =>
                            setFormData({
                              ...formData,
                              address: e.target.value,
                            })
                          }
                          className="w-full bg-transparent border border-gray-600/30 px-2 py-1 text-gray-800 placeholder-gray-600 focus:outline-none focus:border-gray-600"
                          placeholder="Enter address"
                          required
                        />
                      </div>
                    </div>

                    <div className="flex border-b border-gray-600/20 py-2">
                      <div className="w-48 font-bold">CLASS:</div>
                      <div className="flex-1">
                        <select
                          value={formData.currentClass}
                          onChange={(e) =>
                            setFormData({
                              ...formData,
                              currentClass: e.target.value,
                            })
                          }
                          className="w-full bg-white border border-gray-600/30 px-2 py-1 text-gray-800 focus:outline-none focus:border-gray-600"
                          required
                        >
                          <option value="" className="bg-white text-gray-800">
                            Select a class
                          </option>
                          {STUDENT_CLASSES.map((classOption) => (
                            <option
                              key={classOption.value}
                              value={classOption.value}
                              className="bg-white text-gray-800"
                            >
                              {classOption.label}
                            </option>
                          ))}
                        </select>
                      </div>
                    </div>

                    <div className="flex border-b border-gray-600/20 py-2">
                      <div className="w-48 font-bold">GENDER:</div>
                      <div className="flex-1">
                        <select
                          value={formData.gender}
                          onChange={(e) =>
                            setFormData({
                              ...formData,
                              gender: e.target.value,
                            })
                          }
                          className="w-full bg-white border border-gray-600/30 px-2 py-1 text-gray-800 focus:outline-none focus:border-gray-600"
                          required
                        >
                          <option value="" className="bg-white text-gray-800">
                            Select gender
                          </option>
                          <option
                            value="Male"
                            className="bg-white text-gray-800"
                          >
                            Male
                          </option>
                          <option
                            value="Female"
                            className="bg-white text-gray-800"
                          >
                            Female
                          </option>
                          <option
                            value="Other"
                            className="bg-white text-gray-800"
                          >
                            Other
                          </option>
                        </select>
                      </div>
                    </div>

                    <div className="flex border-b border-gray-600/20 py-2">
                      <div className="w-48 font-bold">YEAR OF ADMISSION:</div>
                      <div className="flex-1">
                        <input
                          type="date"
                          value={formData.admissionDate}
                          onChange={(e) =>
                            setFormData({
                              ...formData,
                              admissionDate: e.target.value,
                            })
                          }
                          className="w-full bg-transparent border border-gray-600/30 px-2 py-1 text-gray-800 placeholder-gray-600 focus:outline-none focus:border-gray-600"
                          required
                        />
                      </div>
                    </div>

                    <div className="flex border-b border-gray-600/20 py-2">
                      <div className="w-48 font-bold">STATE:</div>
                      <div className="flex-1">
                        <input
                          type="text"
                          value={formData.location}
                          onChange={(e) =>
                            setFormData({
                              ...formData,
                              location: e.target.value,
                            })
                          }
                          className="w-full bg-transparent border border-gray-600/30 px-2 py-1 text-gray-800 placeholder-gray-600 focus:outline-none focus:border-gray-600"
                          placeholder="Enter state"
                          required
                        />
                      </div>
                    </div>

                    <div className="flex border-b border-gray-600/20 py-2">
                      <div className="w-48 font-bold">COUNTRY:</div>
                      <div>NIGERIA</div>
                    </div>

                    <div className="flex border-b border-gray-600/20 py-2">
                      <div className="w-48 font-bold">STUDENT EMAIL:</div>
                      <div className="flex-1">
                        <input
                          type="email"
                          value={formData.email}
                          onChange={(e) =>
                            setFormData({
                              ...formData,
                              email: e.target.value,
                            })
                          }
                          className="w-full bg-transparent border border-gray-600/30 px-2 py-1 text-gray-800 placeholder-gray-600 focus:outline-none focus:border-gray-600"
                          placeholder="Enter student's email"
                        />
                      </div>
                    </div>

                    <div className="flex border-b border-gray-600/20 py-2">
                      <div className="w-48 font-bold">STUDENT PHONE:</div>
                      <div className="flex-1">
                        <input
                          type="tel"
                          value={formData.phoneNumber}
                          onChange={(e) =>
                            setFormData({
                              ...formData,
                              phoneNumber: e.target.value,
                            })
                          }
                          className="w-full bg-transparent border border-gray-600/30 px-2 py-1 text-gray-800 placeholder-gray-600 focus:outline-none focus:border-gray-600"
                          placeholder="Enter student's phone"
                        />
                      </div>
                    </div>
                  </div>
                </div>
              )}

              {activeTab === "GUARDIAN" && (
                <div>
                  <div className="border-b border-gray-600 mb-4 pb-2">
                    <div className="text-sm font-bold">
                      GUARDIAN/PARENT RECORD CREATION
                    </div>
                    <div className="text-xs">ENTER PARENT DATA BELOW</div>
                  </div>

                  <div className="space-y-4 text-xs">
                    {/* Parent Account Linking - Moved to top */}
                    <div className="border border-gray-600 p-4 bg-blue-50/30">
                      <div className="text-xs mb-3 font-bold border-b border-gray-600 pb-1 flex items-center gap-2">
                        <Users className="w-4 h-4" />
                        PARENT ACCOUNT LINKING
                      </div>
                      <div className="space-y-4 text-xs">
                        <div className="flex flex-col md:flex-row">
                          <div className="w-full md:w-40 font-bold mb-1 md:mb-0">
                            LINK PARENT ACCOUNT:
                          </div>
                          <div className="flex-1">
                            <select
                              value={formData.parentId}
                              onChange={(e) =>
                                setFormData({
                                  ...formData,
                                  parentId: e.target.value,
                                })
                              }
                              className="w-full bg-white border border-gray-600/30 px-2 py-1 text-gray-800 focus:outline-none focus:border-gray-600"
                            >
                              <option
                                value=""
                                className="bg-white text-gray-800"
                              >
                                Select a parent account (optional)
                              </option>
                              {parentUsers.map((parent) => (
                                <option
                                  key={parent._id}
                                  value={parent._id}
                                  className="bg-white text-gray-800"
                                >
                                  {parent.name} ({parent.email})
                                </option>
                              ))}
                            </select>
                            <div className="text-xs text-blue-600 mt-1">
                              Selecting a parent account will auto-fill their
                              information below
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>

                    {/* Primary Guardian Contact Info */}
                    <div className="border border-gray-600 p-4 bg-gray-100/20">
                      <div className="text-xs mb-3 font-bold border-b border-gray-600 pb-1 flex items-center gap-2">
                        PRIMARY GUARDIAN CONTACT INFO
                        {formData.parentId && (
                          <span className="text-xs bg-blue-100 text-blue-800 px-2 py-0.5 rounded">
                            AUTO-FILLED FROM ACCOUNT
                          </span>
                        )}
                      </div>
                      <div className="space-y-4 text-xs">
                        <div className="flex flex-col md:flex-row">
                          <div className="w-full md:w-40 font-bold mb-1 md:mb-0">
                            NAME:
                          </div>
                          <div className="flex-1">
                            <input
                              type="text"
                              value={formData.parentName}
                              onChange={(e) =>
                                setFormData({
                                  ...formData,
                                  parentName: e.target.value,
                                })
                              }
                              className={`w-full border border-gray-600/30 px-2 py-1 text-gray-800 placeholder-gray-600 focus:outline-none focus:border-gray-600 ${
                                formData.parentId
                                  ? "bg-blue-50"
                                  : "bg-transparent"
                              }`}
                              placeholder="Enter parent name"
                              required
                            />
                          </div>
                        </div>
                        <div className="flex flex-col md:flex-row">
                          <div className="w-full md:w-40 font-bold mb-1 md:mb-0">
                            RELATIONSHIP:
                          </div>
                          <div className="flex-1">
                            <select
                              value={formData.relationshipToStudent}
                              onChange={(e) =>
                                setFormData({
                                  ...formData,
                                  relationshipToStudent: e.target.value,
                                })
                              }
                              className="w-full bg-white border border-gray-600/30 px-2 py-1 text-gray-800 focus:outline-none focus:border-gray-600"
                              required
                            >
                              <option
                                value=""
                                className="bg-white text-gray-800"
                              >
                                Select relationship
                              </option>
                              <option
                                value="Father"
                                className="bg-white text-gray-800"
                              >
                                Father
                              </option>
                              <option
                                value="Mother"
                                className="bg-white text-gray-800"
                              >
                                Mother
                              </option>
                              <option
                                value="Guardian"
                                className="bg-white text-gray-800"
                              >
                                Guardian
                              </option>
                              <option
                                value="Uncle"
                                className="bg-white text-gray-800"
                              >
                                Uncle
                              </option>
                              <option
                                value="Aunt"
                                className="bg-white text-gray-800"
                              >
                                Aunt
                              </option>
                              <option
                                value="Grandparent"
                                className="bg-white text-gray-800"
                              >
                                Grandparent
                              </option>
                              <option
                                value="Other"
                                className="bg-white text-gray-800"
                              >
                                Other
                              </option>
                            </select>
                            <div className="text-xs text-gray-600 mt-1">
                              Relationship to the student (always editable)
                            </div>
                          </div>
                        </div>
                        <div className="flex flex-col md:flex-row">
                          <div className="w-full md:w-40 font-bold mb-1 md:mb-0">
                            PHONE:
                          </div>
                          <div className="flex-1">
                            <input
                              type="tel"
                              value={formData.parentPhone}
                              onChange={(e) =>
                                setFormData({
                                  ...formData,
                                  parentPhone: e.target.value,
                                })
                              }
                              className={`w-full border border-gray-600/30 px-2 py-1 text-gray-800 placeholder-gray-600 focus:outline-none focus:border-gray-600 ${
                                formData.parentId
                                  ? "bg-blue-50"
                                  : "bg-transparent"
                              }`}
                              placeholder="Enter parent phone"
                              required
                            />
                          </div>
                        </div>
                        <div className="flex flex-col md:flex-row">
                          <div className="w-full md:w-40 font-bold mb-1 md:mb-0">
                            EMAIL:
                          </div>
                          <div className="flex-1">
                            <input
                              type="email"
                              value={formData.parentEmail}
                              onChange={(e) =>
                                setFormData({
                                  ...formData,
                                  parentEmail: e.target.value,
                                })
                              }
                              className={`w-full border border-gray-600/30 px-2 py-1 text-gray-800 placeholder-gray-600 focus:outline-none focus:border-gray-600 ${
                                formData.parentId
                                  ? "bg-blue-50"
                                  : "bg-transparent"
                              }`}
                              placeholder="Enter parent email"
                            />
                          </div>
                        </div>
                      </div>
                    </div>

                    {/* Emergency Contact Info */}
                    <div className="border border-gray-600 p-4 bg-gray-100/20">
                      <div className="text-xs mb-3 font-bold border-b border-gray-600 pb-1">
                        EMERGENCY CONTACT INFO
                      </div>
                      <div className="space-y-4 text-xs">
                        <div className="flex flex-col md:flex-row">
                          <div className="w-full md:w-40 font-bold mb-1 md:mb-0">
                            NAME:
                          </div>
                          <div className="flex-1">
                            <input
                              type="text"
                              value={formData.emergencyContact?.name || ""}
                              onChange={(e) =>
                                setFormData({
                                  ...formData,
                                  emergencyContact: {
                                    ...formData.emergencyContact,
                                    name: e.target.value,
                                    relationship:
                                      formData.emergencyContact?.relationship ||
                                      "",
                                    phoneNumber:
                                      formData.emergencyContact?.phoneNumber ||
                                      "",
                                  },
                                })
                              }
                              className="w-full bg-transparent border border-gray-600/30 px-2 py-1 text-gray-800 placeholder-gray-600 focus:outline-none focus:border-gray-600"
                              placeholder="Enter emergency contact name"
                            />
                          </div>
                        </div>
                        <div className="flex flex-col md:flex-row">
                          <div className="w-full md:w-40 font-bold mb-1 md:mb-0">
                            RELATIONSHIP:
                          </div>
                          <div className="flex-1">
                            <select
                              value={
                                formData.emergencyContact?.relationship || ""
                              }
                              onChange={(e) =>
                                setFormData({
                                  ...formData,
                                  emergencyContact: {
                                    ...formData.emergencyContact,
                                    name: formData.emergencyContact?.name || "",
                                    relationship: e.target.value,
                                    phoneNumber:
                                      formData.emergencyContact?.phoneNumber ||
                                      "",
                                  },
                                })
                              }
                              className="w-full bg-white border border-gray-600/30 px-2 py-1 text-gray-800 focus:outline-none focus:border-gray-600"
                            >
                              <option
                                value=""
                                className="bg-white text-gray-800"
                              >
                                Select relationship
                              </option>
                              <option
                                value="Father"
                                className="bg-white text-gray-800"
                              >
                                Father
                              </option>
                              <option
                                value="Mother"
                                className="bg-white text-gray-800"
                              >
                                Mother
                              </option>
                              <option
                                value="Guardian"
                                className="bg-white text-gray-800"
                              >
                                Guardian
                              </option>
                              <option
                                value="Uncle"
                                className="bg-white text-gray-800"
                              >
                                Uncle
                              </option>
                              <option
                                value="Aunt"
                                className="bg-white text-gray-800"
                              >
                                Aunt
                              </option>
                              <option
                                value="Grandparent"
                                className="bg-white text-gray-800"
                              >
                                Grandparent
                              </option>
                              <option
                                value="Neighbor"
                                className="bg-white text-gray-800"
                              >
                                Neighbor
                              </option>
                              <option
                                value="Teacher"
                                className="bg-white text-gray-800"
                              >
                                Teacher
                              </option>
                              <option
                                value="Other"
                                className="bg-white text-gray-800"
                              >
                                Other
                              </option>
                            </select>
                          </div>
                        </div>
                        <div className="flex flex-col md:flex-row">
                          <div className="w-full md:w-40 font-bold mb-1 md:mb-0">
                            PHONE:
                          </div>
                          <div className="flex-1">
                            <input
                              type="tel"
                              value={
                                formData.emergencyContact?.phoneNumber || ""
                              }
                              onChange={(e) =>
                                setFormData({
                                  ...formData,
                                  emergencyContact: {
                                    ...formData.emergencyContact,
                                    name: formData.emergencyContact?.name || "",
                                    relationship:
                                      formData.emergencyContact?.relationship ||
                                      "",
                                    phoneNumber: e.target.value,
                                  },
                                })
                              }
                              className="w-full bg-transparent border border-gray-600/30 px-2 py-1 text-gray-800 placeholder-gray-600 focus:outline-none focus:border-gray-600"
                              placeholder="Enter emergency contact phone"
                            />
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              )}
            </form>
          </div>

          {/* Command Bar */}
          <div className="border-t-2 border-gray-600 p-3 md:p-4 bg-gray-100/20">
            <div className="flex flex-col md:flex-row md:items-center justify-between gap-4">
              <div className="text-xs">
                [CREATION SESSION ACTIVE] | [MODE: STUDENT-CREATE] | [STATUS:
                READY]
              </div>

              <div className="flex flex-col sm:flex-row items-stretch sm:items-center gap-3">
                <button
                  onClick={handleSubmit}
                  disabled={createStudentMutation.isPending}
                  className="px-4 py-2 border border-gray-600 bg-gray-50 hover:bg-gray-600 hover:text-white transition-colors text-xs font-bold disabled:opacity-50"
                >
                  {createStudentMutation.isPending
                    ? "[CREATING...]"
                    : "[CREATE STUDENT]"}
                </button>

                <button
                  type="button"
                  onClick={() => setCreateModalOpen(false)}
                  className="px-4 py-2 border border-red-500 bg-gray-50 hover:bg-red-500 transition-colors text-xs font-bold"
                >
                  [CANCEL]
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Custom Terminal Scrollbar */}
      <style jsx>{`
        .custom-scrollbar::-webkit-scrollbar {
          width: 12px;
        }
        .custom-scrollbar::-webkit-scrollbar-track {
          background: #f9fafb;
          border: 1px solid #6b7280;
        }
        .custom-scrollbar::-webkit-scrollbar-thumb {
          background: #6b7280;
          border: 1px solid #f9fafb;
        }
        .custom-scrollbar::-webkit-scrollbar-thumb:hover {
          background: #4b5563;
        }
      `}</style>
    </div>
  );
}
