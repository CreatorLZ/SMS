"use client";
import { useState, useEffect } from "react";
import { useCreateStudentMutation } from "@/hooks/useCreateStudentMutation";
import { useUsersQuery } from "@/hooks/useUsersQuery";
import { useStudentManagementStore } from "@/store/studentManagementStore";
import { useAddStudentsMutation } from "@/hooks/useAddStudentsMutation";
import { useStudentIdPreview } from "@/hooks/useStudentIdPreview";
import { PassportPhotoUploader } from "@/components/PassportPhotoUploader";
import { Student } from "@/hooks/useStudentsQuery";
import { Toast } from "./toast";
import { Button } from "./button";
import { Input } from "./input";

import { Card, CardContent, CardHeader, CardTitle } from "./card";
import { Badge } from "./badge";
import { Separator } from "./separator";

import {
  STUDENT_CLASSES,
  STUDENT_CLASS_VALUES,
  isValidStudentClass,
} from "@/constants/classes";
import {
  User,
  Calendar,
  MapPin,
  Phone,
  Users,
  GraduationCap,
  Hash,
  X,
  Camera,
  Info,
} from "lucide-react";

interface CreateStudentModalProps {
  classroomId?: string;
  classroomName?: string;
  onStudentCreated?: () => void;
}

export default function CreateStudentModal({
  classroomId,
  classroomName,
  onStudentCreated,
}: CreateStudentModalProps = {}) {
  const {
    isCreateModalOpen,
    setCreateModalOpen,
    classroomId: storeClassroomId,
    classroomName: storeClassroomName,
    onStudentCreated: storeOnStudentCreated,
  } = useStudentManagementStore();
  const createStudentMutation = useCreateStudentMutation();
  const addStudentsMutation = useAddStudentsMutation();
  const { data: users } = useUsersQuery();

  // Use props if provided, otherwise use store values
  const currentClassroomId = classroomId || storeClassroomId;
  const currentClassroomName = classroomName || storeClassroomName;
  const currentOnStudentCreated = onStudentCreated || storeOnStudentCreated;

  const [formData, setFormData] = useState({
    firstName: "",
    lastName: "",
    studentId: "",
    currentClass: currentClassroomName || "",
    classroomId: currentClassroomId || "",
    parentId: "",
    gender: "",
    dateOfBirth: "",
    address: "",
    location: "",
    phoneNumber: "",
    email: "",
    parentName: "",
    parentPhone: "",
    parentEmail: "",
    relationshipToStudent: "",
    otherRelationship: "",
    admissionDate: "",
    emergencyContact: {
      name: "",
      relationship: "",
      phoneNumber: "",
    },
    passportPhoto: "",
  });

  const [isAutoGenerated, setIsAutoGenerated] = useState(false);
  const [toastProps, setToastProps] = useState<{
    message: string;
    type: "success" | "error";
  } | null>(null);
  const [showToast, setShowToast] = useState(false);

  // Use the student ID preview hook
  const {
    previewId,
    isLoading: isPreviewLoading,
    error: previewError,
    generatePreview,
    clearPreview,
  } = useStudentIdPreview();

  const showToastMessage = (message: string, type: "success" | "error") => {
    setToastProps({ message, type });
    setShowToast(true);
  };

  // Generate preview ID when class changes
  useEffect(() => {
    if (formData.currentClass && !formData.studentId) {
      generatePreview(formData.currentClass);
    } else if (!formData.currentClass) {
      clearPreview();
    }
  }, [
    formData.currentClass,
    formData.studentId,
    generatePreview,
    clearPreview,
  ]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      // Validate otherRelationship when Other is selected
      if (
        formData.relationshipToStudent === "Other" &&
        (!formData.otherRelationship ||
          formData.otherRelationship.trim() === "")
      ) {
        showToastMessage(
          "Please specify the relationship when 'Other' is selected.",
          "error"
        );
        return;
      }

      let submissionData = { ...formData };

      // Use otherRelationship value when Other is selected
      if (submissionData.relationshipToStudent === "Other") {
        submissionData.relationshipToStudent = submissionData.otherRelationship;
      }

      // If creating within a classroom context, ensure classroomId is set properly
      if (currentClassroomId && currentClassroomName) {
        submissionData.classroomId = currentClassroomId;
        submissionData.currentClass = currentClassroomName;
      }

      // Create the student with proper classroom data
      const createdStudent = (await createStudentMutation.mutateAsync(
        submissionData
      )) as Student;

      // If this was created within a classroom context, the student is already assigned
      if (currentClassroomId) {
        showToastMessage(
          "Student created and added to class successfully!",
          "success"
        );
      } else {
        showToastMessage("Student created successfully!", "success");
      }

      // Call the callback to refresh classroom data
      if (currentOnStudentCreated) {
        currentOnStudentCreated();
      }

      setCreateModalOpen(false);
      resetForm();
    } catch (error: any) {
      console.error("Error creating student:", error);
      // Only show toast for actual business errors, not server errors
      if (error?.response?.status === 400) {
        showToastMessage(
          error?.response?.data?.message || "Invalid data provided",
          "error"
        );
      } else if (error?.response?.status >= 500) {
        showToastMessage("Server error occurred. Please try again.", "error");
      } else {
        showToastMessage("An unexpected error occurred", "error");
      }
    }
  };

  const resetForm = () => {
    setFormData({
      firstName: "",
      lastName: "",
      studentId: "",
      currentClass: currentClassroomName || "",
      classroomId: currentClassroomId || "",
      parentId: "",
      gender: "",
      dateOfBirth: "",
      address: "",
      location: "",
      phoneNumber: "",
      email: "",
      parentName: "",
      parentPhone: "",
      parentEmail: "",
      relationshipToStudent: "",
      otherRelationship: "",
      admissionDate: "",
      emergencyContact: {
        name: "",
        relationship: "",
        phoneNumber: "",
      },
      passportPhoto: "",
    });
    setIsAutoGenerated(false);
    clearPreview();
  };

  // Filter only parent users
  const parentUsers =
    users?.data?.filter((user) => user.role === "parent") || [];

  if (!isCreateModalOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-lg w-full max-w-4xl max-h-[90vh] overflow-y-auto scale-in">
        <div className="flex items-center justify-between p-6 border-b">
          <h2 className="text-2xl font-bold flex items-center gap-2">
            <User className="w-6 h-6" />
            Create New Student
          </h2>
          <button
            onClick={() => setCreateModalOpen(false)}
            className="text-gray-400 hover:text-gray-600"
          >
            <X className="w-6 h-6" />
          </button>
        </div>

        <form onSubmit={handleSubmit} className="space-y-6">
          {/* Basic Information */}
          <Card>
            <CardHeader>
              <CardTitle className="text-lg flex items-center gap-2">
                <User className="w-5 h-5" />
                Basic Information
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div className="space-y-2">
                  <label
                    htmlFor="firstName"
                    className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
                  >
                    First Name *
                  </label>
                  <Input
                    id="firstName"
                    type="text"
                    value={formData.firstName}
                    onChange={(e) =>
                      setFormData({ ...formData, firstName: e.target.value })
                    }
                    placeholder="Enter first name"
                    required
                  />
                </div>

                <div className="space-y-2">
                  <label
                    htmlFor="lastName"
                    className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
                  >
                    Surname *
                  </label>
                  <Input
                    id="lastName"
                    type="text"
                    value={formData.lastName}
                    onChange={(e) =>
                      setFormData({ ...formData, lastName: e.target.value })
                    }
                    placeholder="Enter surname"
                    required
                  />
                </div>

                <div className="space-y-2">
                  <label
                    htmlFor="gender"
                    className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
                  >
                    Gender *
                  </label>
                  <select
                    id="gender"
                    value={formData.gender}
                    onChange={(e) =>
                      setFormData({ ...formData, gender: e.target.value })
                    }
                    className="flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"
                    required
                  >
                    <option value="">Select gender</option>
                    <option value="Male">Male</option>
                    <option value="Female">Female</option>
                    <option value="Other">Other</option>
                  </select>
                </div>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="space-y-2">
                  <label
                    htmlFor="dateOfBirth"
                    className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
                  >
                    Date of Birth *
                  </label>
                  <Input
                    id="dateOfBirth"
                    type="date"
                    value={formData.dateOfBirth}
                    onChange={(e) =>
                      setFormData({ ...formData, dateOfBirth: e.target.value })
                    }
                    required
                  />
                </div>

                <div className="space-y-2">
                  <label
                    htmlFor="admissionDate"
                    className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
                  >
                    Admission Date *
                  </label>
                  <Input
                    id="admissionDate"
                    type="date"
                    value={formData.admissionDate}
                    onChange={(e) =>
                      setFormData({
                        ...formData,
                        admissionDate: e.target.value,
                      })
                    }
                    required
                  />
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Academic Information */}
          <Card>
            <CardHeader>
              <CardTitle className="text-lg flex items-center gap-2">
                <GraduationCap className="w-5 h-5" />
                Academic Information
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="space-y-2">
                  <label
                    htmlFor="currentClass"
                    className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
                  >
                    Class *
                  </label>
                  <select
                    id="currentClass"
                    value={formData.currentClass}
                    onChange={(e) =>
                      setFormData({ ...formData, currentClass: e.target.value })
                    }
                    className="flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"
                    required
                  >
                    <option value="">Select a class</option>
                    {STUDENT_CLASSES.map((classOption) => (
                      <option key={classOption.value} value={classOption.value}>
                        {classOption.label}
                      </option>
                    ))}
                  </select>
                </div>

                <div className="space-y-2">
                  <label
                    htmlFor="studentId"
                    className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
                  >
                    Student ID{" "}
                    <span className="text-sm text-muted-foreground">
                      (Leave empty for auto-generation)
                    </span>
                  </label>
                  <div className="space-y-2">
                    <Input
                      id="studentId"
                      type="text"
                      value={formData.studentId}
                      onChange={(e) => {
                        setFormData({ ...formData, studentId: e.target.value });
                        setIsAutoGenerated(false);
                      }}
                      placeholder={
                        previewId ||
                        "Enter student ID or leave empty for auto-generation"
                      }
                    />
                    {previewId && !formData.studentId && (
                      <div className="flex items-center justify-between bg-blue-50 p-3 rounded-md border">
                        <div className="flex items-center space-x-2">
                          <Hash className="w-4 h-4 text-blue-600" />
                          <span className="text-sm text-blue-700">
                            Suggested: <strong>{previewId}</strong>
                          </span>
                          <Badge variant="secondary" className="text-xs">
                            Auto-generated
                          </Badge>
                        </div>
                        <Button
                          type="button"
                          size="sm"
                          onClick={() => {
                            if (previewId) {
                              setFormData({
                                ...formData,
                                studentId: previewId,
                              });
                              setIsAutoGenerated(true);
                            }
                          }}
                          variant="outline"
                          disabled={!previewId || isPreviewLoading}
                        >
                          {isPreviewLoading ? "Generating..." : "Use Auto ID"}
                        </Button>
                      </div>
                    )}
                    {formData.studentId && (
                      <div className="flex items-center gap-2 text-sm text-green-600">
                        <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                        Manual ID: {formData.studentId}
                      </div>
                    )}
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Address Information */}
          <Card>
            <CardHeader>
              <CardTitle className="text-lg flex items-center gap-2">
                <MapPin className="w-5 h-5" />
                Address Information
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="space-y-2">
                <label
                  htmlFor="address"
                  className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
                >
                  Address *
                </label>
                <Input
                  id="address"
                  type="text"
                  value={formData.address}
                  onChange={(e) =>
                    setFormData({ ...formData, address: e.target.value })
                  }
                  placeholder="Enter student's address"
                  required
                />
              </div>

              <div className="space-y-2">
                <label
                  htmlFor="location"
                  className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
                >
                  Location *
                </label>
                <Input
                  id="location"
                  type="text"
                  value={formData.location}
                  onChange={(e) =>
                    setFormData({ ...formData, location: e.target.value })
                  }
                  placeholder="Enter location/area"
                  required
                />
              </div>
            </CardContent>
          </Card>

          {/* Parent/Guardian Information */}
          <Card>
            <CardHeader>
              <CardTitle className="text-lg flex items-center gap-2">
                <Users className="w-5 h-5" />
                Parent/Guardian Information
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="space-y-2">
                  <label
                    htmlFor="parentName"
                    className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
                  >
                    Parent Name *
                  </label>
                  <Input
                    id="parentName"
                    type="text"
                    value={formData.parentName}
                    onChange={(e) =>
                      setFormData({ ...formData, parentName: e.target.value })
                    }
                    placeholder="Enter parent's full name"
                    required
                  />
                </div>

                <div className="space-y-2">
                  <label
                    htmlFor="relationshipToStudent"
                    className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
                  >
                    Relationship to Student *
                  </label>
                  <select
                    id="relationshipToStudent"
                    value={formData.relationshipToStudent}
                    onChange={(e) =>
                      setFormData({
                        ...formData,
                        relationshipToStudent: e.target.value,
                      })
                    }
                    className="flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"
                    required
                  >
                    <option value="">Select relationship</option>
                    <option value="Father">Father</option>
                    <option value="Mother">Mother</option>
                    <option value="Guardian">Guardian</option>
                    <option value="Uncle">Uncle</option>
                    <option value="Aunt">Aunt</option>
                    <option value="Grandparent">Grandparent</option>
                    <option value="Other">Other</option>
                  </select>
                </div>
              </div>

              {formData.relationshipToStudent === "Other" && (
                <div className="space-y-2">
                  <label
                    htmlFor="otherRelationship"
                    className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
                  >
                    Specify Relationship *
                  </label>
                  <Input
                    id="otherRelationship"
                    type="text"
                    value={formData.otherRelationship}
                    onChange={(e) =>
                      setFormData({
                        ...formData,
                        otherRelationship: e.target.value,
                      })
                    }
                    placeholder="Enter the relationship"
                    required
                  />
                </div>
              )}

              {/* Student Phone & Email */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="space-y-2">
                  <label
                    htmlFor="phoneNumber"
                    className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
                  >
                    Student Phone (Optional)
                  </label>
                  <Input
                    id="phoneNumber"
                    type="tel"
                    value={formData.phoneNumber || ""}
                    onChange={(e) =>
                      setFormData({ ...formData, phoneNumber: e.target.value })
                    }
                    placeholder="Enter student's phone number"
                  />
                </div>

                <div className="space-y-2">
                  <label
                    htmlFor="email"
                    className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
                  >
                    Student Email (Optional)
                  </label>
                  <Input
                    id="email"
                    type="email"
                    value={formData.email || ""}
                    onChange={(e) =>
                      setFormData({ ...formData, email: e.target.value })
                    }
                    placeholder="Enter student's email address"
                  />
                </div>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="space-y-2">
                  <label
                    htmlFor="parentPhone"
                    className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
                  >
                    Parent Phone *
                  </label>
                  <Input
                    id="parentPhone"
                    type="tel"
                    value={formData.parentPhone}
                    onChange={(e) =>
                      setFormData({ ...formData, parentPhone: e.target.value })
                    }
                    placeholder="Enter phone number"
                    pattern="[0-9]*"
                    title="Please enter only digits"
                    required
                  />
                </div>

                <div className="space-y-2">
                  <label
                    htmlFor="parentEmail"
                    className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
                  >
                    Parent Email (Optional)
                  </label>
                  <Input
                    id="parentEmail"
                    type="email"
                    value={formData.parentEmail || ""}
                    onChange={(e) =>
                      setFormData({ ...formData, parentEmail: e.target.value })
                    }
                    placeholder="Enter parent's email address"
                  />
                </div>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="space-y-2">
                  <label
                    htmlFor="parentId"
                    className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
                  >
                    Link to Parent Account (Optional)
                  </label>
                  <select
                    id="parentId"
                    value={formData.parentId}
                    onChange={(e) =>
                      setFormData({ ...formData, parentId: e.target.value })
                    }
                    className="flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"
                  >
                    <option value="">Select a parent account</option>
                    {parentUsers.map((parent) => (
                      <option key={parent._id} value={parent._id}>
                        {parent.name} ({parent.email})
                      </option>
                    ))}
                  </select>
                </div>

                <div className="space-y-2">
                  <label
                    htmlFor="emergencyContactName"
                    className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
                  >
                    Emergency Contact (Optional)
                  </label>
                  <div className="grid grid-cols-2 gap-2">
                    <Input
                      id="emergencyContactName"
                      type="text"
                      placeholder="Name"
                      value={formData.emergencyContact?.name || ""}
                      onChange={(e) =>
                        setFormData({
                          ...formData,
                          emergencyContact: {
                            ...formData.emergencyContact,
                            name: e.target.value,
                            relationship:
                              formData.emergencyContact?.relationship || "",
                            phoneNumber:
                              formData.emergencyContact?.phoneNumber || "",
                          },
                        })
                      }
                    />
                    <select
                      id="emergencyContactRelation"
                      value={formData.emergencyContact?.relationship || ""}
                      onChange={(e) =>
                        setFormData({
                          ...formData,
                          emergencyContact: {
                            ...formData.emergencyContact,
                            name: formData.emergencyContact?.name || "",
                            relationship: e.target.value,
                            phoneNumber:
                              formData.emergencyContact?.phoneNumber || "",
                          },
                        })
                      }
                      className="flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-xs ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2"
                    >
                      <option value="">Relation</option>
                      <option value="Grandparent">Grandparent</option>
                      <option value="Uncle">Uncle</option>
                      <option value="Aunt">Aunt</option>
                      <option value="Sibling">Sibling</option>
                    </select>
                  </div>
                  <Input
                    type="tel"
                    placeholder="Emergency Contact Phone"
                    value={formData.emergencyContact?.phoneNumber || ""}
                    onChange={(e) =>
                      setFormData({
                        ...formData,
                        emergencyContact: {
                          ...formData.emergencyContact,
                          name: formData.emergencyContact?.name || "",
                          relationship:
                            formData.emergencyContact?.relationship || "",
                          phoneNumber: e.target.value,
                        },
                      })
                    }
                  />
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Passport Photo Upload - Available after student creation */}
          <Card>
            <CardHeader>
              <CardTitle className="text-lg flex items-center gap-2">
                <Camera className="w-5 h-5" />
                Passport Photo
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
                <div className="flex items-start gap-3">
                  <Info className="w-5 h-5 text-blue-600 mt-0.5 flex-shrink-0" />
                  <div>
                    <p className="text-sm text-blue-800 font-medium">
                      Passport photo can be uploaded after creating the student
                      profile
                    </p>
                    <p className="text-xs text-blue-600 mt-1">
                      Once the student is created, you can upload and manage
                      their passport photo from the student details page.
                    </p>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>

          <Separator />

          {/* Form Actions */}
          <div className="flex flex-col-reverse sm:flex-row justify-end gap-3">
            <Button
              type="button"
              variant="outline"
              onClick={() => setCreateModalOpen(false)}
              className="w-full sm:w-auto"
            >
              Cancel
            </Button>
            <Button
              type="submit"
              disabled={createStudentMutation.isPending}
              className="w-full sm:w-auto"
            >
              {createStudentMutation.isPending ? (
                <>
                  <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin mr-2"></div>
                  Creating Student...
                </>
              ) : (
                <>
                  <User className="w-4 h-4 mr-2" />
                  Create Student
                </>
              )}
            </Button>
          </div>
        </form>

        <div className="p-6">
          {showToast && toastProps && (
            <Toast
              message={toastProps.message}
              type={toastProps.type}
              onClose={() => setShowToast(false)}
            />
          )}
        </div>
      </div>
    </div>
  );
}
