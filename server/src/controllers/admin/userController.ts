import { Request, Response } from "express";
import { User } from "../../models/User";
import { Student } from "../../models/Student";
import { AuditLog } from "../../models/AuditLog";
import jwt from "jsonwebtoken";
import bcrypt from "bcrypt";
import {
  generateStudentId,
  isStudentIdAvailable,
} from "../../utils/studentIdGenerator";

// @desc    Register a new user (admin only)
// @route   POST /api/admin/users
// @access  Private/Admin
export const registerUser = async (req: Request, res: Response) => {
  try {
    const { name, email, password, role } = req.body;

    // Check if user already exists
    const userExists = await User.findOne({ email });
    if (userExists) {
      return res.status(400).json({ message: "User already exists" });
    }

    // Create user
    const user = await User.create({
      name,
      email,
      password,
      role,
    });

    // Create audit log
    await AuditLog.create({
      userId: req.user?._id,
      actionType: "USER_CREATE",
      description: `Created new ${role} account for ${name}`,
      targetId: user._id,
    });

    res.status(201).json({
      _id: user._id,
      name: user.name,
      email: user.email,
      role: user.role,
    });
  } catch (error) {
    res.status(500).json({
      message: "Server error",
      error: error instanceof Error ? error.message : String(error),
    });
  }
};

// @desc    Get all users
// @route   GET /api/admin/users
// @access  Private/Admin
export const getUsers = async (req: Request, res: Response) => {
  try {
    const users = await User.find().select("-password");
    res.json(users);
  } catch (error) {
    res.status(500).json({
      message: "Server error",
      error: error instanceof Error ? error.message : String(error),
    });
  }
};

// @desc    Get all students with filtering and pagination
// @route   GET /api/admin/students
// @access  Private/Admin
export const getStudents = async (req: Request, res: Response) => {
  try {
    const { search, classId, page = 1, limit = 10 } = req.query;

    let query: any = {};

    // Add search filter
    if (search) {
      query.$or = [
        { fullName: { $regex: search, $options: "i" } },
        { studentId: { $regex: search, $options: "i" } },
      ];
    }

    // Add class filter
    if (classId) {
      query.currentClass = classId;
    }

    const pageNum = parseInt(page as string, 10);
    const limitNum = parseInt(limit as string, 10);
    const skip = (pageNum - 1) * limitNum;

    const students = await Student.find(query)
      .select("fullName studentId currentClass status createdAt")
      .sort({ createdAt: -1 })
      .skip(skip)
      .limit(limitNum);

    const total = await Student.countDocuments(query);

    res.json({
      students,
      pagination: {
        page: pageNum,
        limit: limitNum,
        total,
        pages: Math.ceil(total / limitNum),
      },
    });
  } catch (error) {
    res.status(500).json({
      message: "Server error",
      error: error instanceof Error ? error.message : String(error),
    });
  }
};

// @desc    Create a new student
// @route   POST /api/admin/students
// @access  Private/Admin
export const createStudent = async (req: Request, res: Response) => {
  try {
    const {
      fullName,
      studentId: providedStudentId,
      currentClass,
      parentId,
    } = req.body;

    let studentId = providedStudentId;

    // Auto-generate student ID if not provided or empty
    if (!studentId || studentId.trim() === "") {
      studentId = await generateStudentId(currentClass);
    } else {
      // Validate provided student ID
      const isAvailable = await isStudentIdAvailable(studentId);
      if (!isAvailable) {
        return res.status(400).json({ message: "Student ID already exists" });
      }
    }

    // Create student
    const student = await Student.create({
      fullName,
      studentId,
      currentClass,
      termFees: [],
      attendance: [],
      results: [],
    });

    // If parent is provided, update parent's linked students
    if (parentId) {
      await User.findByIdAndUpdate(parentId, {
        $addToSet: { linkedStudentIds: student._id },
      });
    }

    // Create audit log (don't fail the operation if audit logging fails)
    try {
      await AuditLog.create({
        userId: req.user?._id,
        actionType: "STUDENT_CREATE",
        description: `Created new student ${fullName} (${studentId})`,
        targetId: student._id,
      });
    } catch (auditError) {
      console.error("Audit log creation failed:", auditError);
      // Don't return error - audit logging failure shouldn't affect the main operation
    }

    res.status(201).json({
      ...student.toObject(),
      wasAutoGenerated: !providedStudentId || providedStudentId.trim() === "",
    });
  } catch (error) {
    res.status(500).json({
      message: "Server error",
      error: error instanceof Error ? error.message : String(error),
    });
  }
};

// @desc    Update student details
// @route   PUT /api/admin/students/:id
// @access  Private/Admin
export const updateStudent = async (req: Request, res: Response) => {
  try {
    const { id } = req.params;
    const { fullName, studentId, currentClass, parentId } = req.body;

    // Check if student exists
    const student = await Student.findById(id);
    if (!student) {
      return res.status(404).json({ message: "Student not found" });
    }

    // Check if new student ID conflicts (if changed)
    if (studentId !== student.studentId) {
      const existingStudent = await Student.findOne({ studentId });
      if (existingStudent) {
        return res.status(400).json({ message: "Student ID already exists" });
      }
    }

    // Update student
    const updatedStudent = await Student.findByIdAndUpdate(
      id,
      { fullName, studentId, currentClass },
      { new: true }
    );

    // Handle parent relationship
    if (parentId) {
      // Remove from old parent's linked students
      await User.updateMany(
        { linkedStudentIds: id },
        { $pull: { linkedStudentIds: id } }
      );

      // Add to new parent's linked students
      await User.findByIdAndUpdate(parentId, {
        $addToSet: { linkedStudentIds: id },
      });
    }

    // Create audit log (don't fail the operation if audit logging fails)
    try {
      await AuditLog.create({
        userId: req.user?._id,
        actionType: "STUDENT_UPDATE",
        description: `Updated student ${fullName} (${studentId})`,
        targetId: id,
      });
    } catch (auditError) {
      console.error("Audit log creation failed:", auditError);
      // Don't return error - audit logging failure shouldn't affect the main operation
    }

    res.json(updatedStudent);
  } catch (error) {
    res.status(500).json({
      message: "Server error",
      error: error instanceof Error ? error.message : String(error),
    });
  }
};

// @desc    Toggle student status (activate/deactivate)
// @route   PATCH /api/admin/students/:id/status
// @access  Private/Admin
export const toggleStudentStatus = async (req: Request, res: Response) => {
  try {
    const { id } = req.params;
    const { isActive } = req.body;

    // Check if student exists
    const student = await Student.findById(id);
    if (!student) {
      return res.status(404).json({ message: "Student not found" });
    }

    // For soft delete, we can add an isActive field to the Student model
    // For now, we'll use a simple approach with a status field
    const updatedStudent = await Student.findByIdAndUpdate(
      id,
      { status: isActive ? "active" : "inactive" },
      { new: true }
    );

    // Create audit log (don't fail the operation if audit logging fails)
    try {
      await AuditLog.create({
        userId: req.user?._id,
        actionType: isActive ? "STUDENT_ACTIVATE" : "STUDENT_DEACTIVATE",
        description: `${isActive ? "Activated" : "Deactivated"} student ${
          student.fullName
        }`,
        targetId: id,
      });
    } catch (auditError) {
      console.error("Audit log creation failed:", auditError);
      // Don't return error - audit logging failure shouldn't affect the main operation
    }

    res.json(updatedStudent);
  } catch (error) {
    res.status(500).json({
      message: "Server error",
      error: error instanceof Error ? error.message : String(error),
    });
  }
};

// @desc    Get audit logs
// @route   GET /api/admin/logs
// @access  Private/Admin
export const getAuditLogs = async (req: Request, res: Response) => {
  try {
    const logs = await AuditLog.find()
      .populate("userId", "name email")
      .sort({ timestamp: -1 });
    res.json(logs);
  } catch (error) {
    res.status(500).json({
      message: "Server error",
      error: error instanceof Error ? error.message : String(error),
    });
  }
};
